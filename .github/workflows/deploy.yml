name: üöÄ Deploy Xpress.Delivery MVP

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: üì¶ Checkout code
      uses: actions/checkout@v4
    
    - name: üîß Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-js-version: '18'
        
    - name: üìã Validate configuration
      run: |
        echo "üîç Validating application configuration..."
        # Basic validation - check if files exist and are valid
        if [ ! -f "index-modular.html" ]; then
          echo "‚ùå Main application file not found"
          exit 1
        fi
        if [ ! -f "src/config/env.config.js" ]; then
          echo "‚ùå Environment configuration not found"
          exit 1
        fi
        echo "‚úÖ Application configuration valid"

    - name: üîë Setup SSH key for deployment
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "üîê Setting up SSH key for borg.tools..."
        mkdir -p ~/.ssh
        echo "${{ secrets.BORG_TOOLS_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H borg.tools >> ~/.ssh/known_hosts
        echo "‚úÖ SSH key configured"

    - name: üöÄ Deploy to borg.tools
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "üöÄ Deploying to production server (sendxpress.borg.tools)..."
        ssh vizi@borg.tools './deploy.sh sendxpress main'
        echo "‚úÖ Deployment completed"

    - name: üß™ Test deployment
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "üß™ Testing production deployment..."
        sleep 5
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://sendxpress.borg.tools)
        if [ "$HTTP_CODE" = "200" ]; then
          echo "‚úÖ Production site is responding (HTTP $HTTP_CODE)"
        else
          echo "‚ö†Ô∏è Production site returned HTTP $HTTP_CODE"
        fi

  security-check:
    runs-on: ubuntu-latest
    steps:
    - name: üì¶ Checkout code
      uses: actions/checkout@v4

    - name: üîí Check for secrets in code
      run: |
        echo "üîç Scanning for potential secrets in committed files..."

        # Check for API keys with actual values (not placeholders)
        # LocationIQ API key pattern
        if grep -r "pk\.[a-f0-9]\{40\}" . --exclude-dir=node_modules --exclude-dir=.git --exclude="*.log" --exclude="deploy.yml" 2>/dev/null; then
          echo "‚ùå Found potential LocationIQ API key in committed files - SECURITY ISSUE!"
          exit 1
        fi

        # Google Maps API key pattern (starts with AIzaSy)
        if grep -r "AIzaSy[A-Za-z0-9_-]\{33\}" . --exclude-dir=node_modules --exclude-dir=.git --exclude="*.log" --exclude=".env.*" --exclude="deploy.yml" 2>/dev/null; then
          echo "‚ùå Found Google API key in committed files - SECURITY ISSUE!"
          exit 1
        fi

        # Check that config.local.js uses placeholders
        if ! grep -q "__LOCATIONIQ_API_KEY__" config.local.js; then
          echo "‚ùå config.local.js missing placeholder for LocationIQ - SECURITY ISSUE!"
          exit 1
        fi

        echo "‚úÖ Security scan completed - no hardcoded secrets found"

    - name: üìã Validate .gitignore
      run: |
        echo "üîç Checking .gitignore configuration..."
        if grep -q "\.env" .gitignore; then
          echo "‚úÖ .env files are gitignored"
        else
          echo "‚ùå .env files not in .gitignore - SECURITY ISSUE!"
          exit 1
        fi

        echo "‚úÖ .gitignore validation completed"